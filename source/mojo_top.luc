module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    output avr_rx,          // AVR RX (FPGA TX)
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input sin,
    input cin,
    output aout,
    output bout,
    output cout
  ) {
  
  sig rst;                  // reset signal
  sig a;                    //record current output on a, b, c
  sig b;
  sig c;
  
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      blinker myBlinker;          //switching different outputs
      fsm myFsm = {RUN, FAIL};    //two states, running the test or fail
      dff countTest[20];          //if the result of the adder is not correct for some time, the FSM will jump to FAIL
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4b1110;           // select 1 LED to show "P" for pass or "F" for fail
    aout = 0;               //output a, b, c are reset to 0
    bout = 0;
    cout = 0;
    a = 0;                   //record the current output. reset to 0, which is the same as the real output 
    b = 0;
    c = 0;
    case (myFsm.q) {
      myFsm.RUN:
        io_seg[4] = 0;       //for letter "P"
        io_seg[5] = 0;
        io_seg[0] = 0;
        io_seg[1] = 0;
        io_seg[6] = 0;
        aout = myBlinker.aa;       //connect the output of myBlinker to output of the mojo
        bout = myBlinker.bb;
        cout = myBlinker.cc;
        io_led = {8x{myBlinker.aa},8x{myBlinker.bb},8x{myBlinker.cc}};        //light up led lights to represent which output is on
        if (myBlinker.aa) {
          a = 1;                                               //record the output
        }
        if (myBlinker.bb) {
          b = 1;
        }
        if (myBlinker.cc) {
          c = 1;
        }
        if (((a ^ b ^ c) != sin) || (((a&b) | (b&c) | (c&a)) != cin) ) {    //check whether the result of the adder fits what we want
          countTest.d = countTest.q+1;                                      //if not, countTest plus one
        }
        if (countTest.q == 20hfffff) {                                      //when countTest is big enough, we announce that the result is wrong
          myFsm.d = myFsm.FAIL; 
        }
        
       myFsm.FAIL:                 //show "F"
        io_seg[4] = 0;
        io_seg[6] = 0;
        io_seg[5] = 0;
        io_seg[0] = 0;   
    }
  }
}