/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input sin,
    input cin,
    output reg aout,
    output reg bout,
    output reg cout
  );
  
  
  
  reg rst;
  
  reg a;
  
  reg b;
  
  reg c;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_myBlinker_aa;
  wire [1-1:0] M_myBlinker_bb;
  wire [1-1:0] M_myBlinker_cc;
  blinker_2 myBlinker (
    .clk(clk),
    .rst(rst),
    .aa(M_myBlinker_aa),
    .bb(M_myBlinker_bb),
    .cc(M_myBlinker_cc)
  );
  localparam RUN_myFsm = 1'd0;
  localparam FAIL_myFsm = 1'd1;
  
  reg M_myFsm_d, M_myFsm_q = RUN_myFsm;
  reg [19:0] M_countTest_d, M_countTest_q = 1'h0;
  
  always @* begin
    M_myFsm_d = M_myFsm_q;
    M_countTest_d = M_countTest_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'he;
    aout = 1'h0;
    bout = 1'h0;
    cout = 1'h0;
    a = 1'h0;
    b = 1'h0;
    c = 1'h0;
    
    case (M_myFsm_q)
      RUN_myFsm: begin
        io_seg[4+0-:1] = 1'h0;
        io_seg[5+0-:1] = 1'h0;
        io_seg[0+0-:1] = 1'h0;
        io_seg[1+0-:1] = 1'h0;
        io_seg[6+0-:1] = 1'h0;
        aout = M_myBlinker_aa;
        bout = M_myBlinker_bb;
        cout = M_myBlinker_cc;
        io_led = {{4'h8{M_myBlinker_aa}}, {4'h8{M_myBlinker_bb}}, {4'h8{M_myBlinker_cc}}};
        if (M_myBlinker_aa) begin
          a = 1'h1;
        end
        if (M_myBlinker_bb) begin
          b = 1'h1;
        end
        if (M_myBlinker_cc) begin
          c = 1'h1;
        end
        if (((a ^ b ^ c) != sin) || (((a & b) | (b & c) | (c & a)) != cin)) begin
          M_countTest_d = M_countTest_q + 1'h1;
        end
        if (M_countTest_q == 20'hfffff) begin
          M_myFsm_d = FAIL_myFsm;
        end
      end
      FAIL_myFsm: begin
        io_seg[4+0-:1] = 1'h0;
        io_seg[6+0-:1] = 1'h0;
        io_seg[5+0-:1] = 1'h0;
        io_seg[0+0-:1] = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_countTest_q <= 1'h0;
      M_myFsm_q <= 1'h0;
    end else begin
      M_countTest_q <= M_countTest_d;
      M_myFsm_q <= M_myFsm_d;
    end
  end
  
endmodule
